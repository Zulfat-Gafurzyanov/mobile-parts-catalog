# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è —Å HTTPS

set -e

echo "üöÄ Starting deployment process..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements() {
    echo "üìã Checking requirements..."
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    echo "‚öôÔ∏è  Setting up environment..."
    
    if [ ! -f .env ]; then
        cp backend/.env.example .env
        echo -e "${YELLOW}‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env - –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º${NC}"
        echo "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, api.yourdomain.com):"
        read DOMAIN
        echo "DOMAIN=$DOMAIN" >> .env
        
        echo "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è Let's Encrypt:"
        read EMAIL
        echo "EMAIL=$EMAIL" >> .env
        
        echo "–í–≤–µ–¥–∏—Ç–µ IP –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:"
        read SERVER_IP
        echo "SERVER_IP=$SERVER_IP" >> .env
    fi
    
    source .env
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    echo "üìÅ Creating directory structure..."
    
    mkdir -p nginx/conf.d
    mkdir -p certbot/conf
    mkdir -p certbot/www
    mkdir -p input_data
    mkdir -p logs
    
    echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"
}

# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
setup_ssl() {
    echo "üîí Setting up SSL certificates..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    if [ -d "certbot/conf/live/$DOMAIN" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç${NC}"
        echo "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö? (y/n)"
        read RENEW
        if [ "$RENEW" != "y" ]; then
            return
        fi
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π nginx –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    echo "Starting temporary nginx for certificate validation..."
    docker-compose up -d nginx
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    echo "Obtaining SSL certificate..."
    docker-compose run --rm certbot certonly \
        --webroot \
        --webroot-path=/var/www/certbot \
        --email $EMAIL \
        --agree-tos \
        --no-eff-email \
        -d $DOMAIN \
        -d www.$DOMAIN
    
    echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã${NC}"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ–º–µ–Ω–æ–º
update_nginx_config() {
    echo "üìù Updating nginx configuration..."
    
    sed -i "s/your-domain.com/$DOMAIN/g" nginx/conf.d/app.conf
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –æ–±–Ω–æ–≤–ª–µ–Ω–∞${NC}"
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Excel
copy_excel_data() {
    echo "üìä Copying Excel data..."
    
    if [ -f "input_data/–û—Å—Ç–∞—Ç–∫–∏ (4).xlsx" ]; then
        echo -e "${GREEN}‚úÖ Excel —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª '–û—Å—Ç–∞—Ç–∫–∏ (4).xlsx' –≤ –ø–∞–ø–∫—É input_data${NC}"
        echo "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞..."
        read
    fi
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_containers() {
    echo "üê≥ Starting Docker containers..."
    
    docker-compose down
    docker-compose build --no-cache
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
check_status() {
    echo "üîç Checking deployment status..."
    
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose ps
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    echo "Testing API endpoint..."
    curl -k https://$DOMAIN/health || curl http://$SERVER_IP:5000/health
    
    echo -e "${GREEN}‚úÖ Deployment completed successfully!${NC}"
    echo ""
    echo "üìå Your API is now available at:"
    echo "   https://$DOMAIN/api/get_data"
    echo ""
    echo "üìå Useful commands:"
    echo "   docker-compose logs -f flask-app  # View Flask logs"
    echo "   docker-compose logs -f nginx      # View Nginx logs"
    echo "   docker-compose restart flask-app  # Restart Flask"
    echo "   docker-compose down              # Stop all containers"
    echo "   docker-compose up -d             # Start all containers"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    echo "======================================"
    echo "    Flask API HTTPS Deployment"
    echo "======================================"
    echo ""
    
    check_requirements
    setup_environment
    create_directories
    update_nginx_config
    copy_excel_data
    setup_ssl
    start_containers
    check_status
    
    echo ""
    echo "======================================"
    echo -e "${GREEN}    ‚úÖ Deployment Complete!${NC}"
    echo "======================================"
}

# –ó–∞–ø—É—Å–∫
main
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è Flask API —Å HTTPS

set -e

echo "üöÄ Starting deployment process..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SERVER_IP="104.165.244.190"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    echo "üìã Checking Docker installation..."
    
    if ! command -v docker &> /dev/null; then
        echo -e "${YELLOW}Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        rm get-docker.sh
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${YELLOW}Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    fi
    
    echo -e "${GREEN}‚úÖ Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    echo "üìÅ Creating directory structure..."
    
    mkdir -p nginx/conf.d
    mkdir -p ssl
    mkdir -p input_data
    mkdir -p logs
    mkdir -p backend
    
    echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
generate_ssl() {
    echo "üîê Checking SSL certificate..."
    
    if [ -f "ssl/cert.pem" ] && [ -f "ssl/key.pem" ]; then
        echo -e "${YELLOW}SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç${NC}"
        echo "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ? (y/n)"
        read -r RENEW
        if [ "$RENEW" != "y" ]; then
            return
        fi
    fi
    
    echo "Generating self-signed SSL certificate..."
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout ssl/key.pem \
        -out ssl/cert.pem \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=$SERVER_IP" \
        -addext "subjectAltName=IP:$SERVER_IP"
    
    chmod 644 ssl/cert.pem
    chmod 600 ssl/key.pem
    
    echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Excel —Ñ–∞–π–ª–∞
check_excel_file() {
    echo "üìä Checking Excel data file..."
    
    if [ -f "input_data/–û—Å—Ç–∞—Ç–∫–∏ (4).xlsx" ]; then
        echo -e "${GREEN}‚úÖ Excel —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
        echo "–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª '–û—Å—Ç–∞—Ç–∫–∏ (4).xlsx' –≤ –ø–∞–ø–∫—É input_data"
        echo "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞..."
        read -r
        
        if [ ! -f "input_data/–û—Å—Ç–∞—Ç–∫–∏ (4).xlsx" ]; then
            echo -e "${RED}‚ùå –§–∞–π–ª –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ...${NC}"
        fi
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    echo "‚öôÔ∏è  Creating .env file..."
    
    cat > .env << EOF
# Server Configuration
SERVER_IP=$SERVER_IP
FLASK_ENV=production
FLASK_APP=app.py
PYTHONUNBUFFERED=1
EOF
    
    echo -e "${GREEN}‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω${NC}"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_old_containers() {
    echo "üõë Stopping old containers..."
    
    docker-compose down 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
    docker rmi flask-api 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ –°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
build_and_start() {
    echo "üê≥ Building and starting Docker containers..."
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
check_status() {
    echo "üîç Checking deployment status..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    echo "Waiting for services to start..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo -e "${BLUE}Container status:${NC}"
    docker-compose ps
    
    echo ""
    echo "Testing endpoints..."
    
    # –¢–µ—Å—Ç health endpoint
    echo -n "Testing HTTP health endpoint: "
    if curl -s -f "http://$SERVER_IP/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${RED}‚ùå${NC}"
    fi
    
    # –¢–µ—Å—Ç HTTPS
    echo -n "Testing HTTPS health endpoint: "
    if curl -s -f -k "https://$SERVER_IP/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${RED}‚ùå${NC}"
    fi
    
    # –¢–µ—Å—Ç API
    echo -n "Testing API endpoint: "
    if curl -s -f -k "https://$SERVER_IP:5000/api/test-cors" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC}"
    fi
}

# –í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
print_instructions() {
    echo ""
    echo "======================================"
    echo -e "${GREEN}    ‚úÖ Deployment Complete!${NC}"
    echo "======================================"
    echo ""
    echo "üìå Your API is now available at:"
    echo -e "${BLUE}   HTTP:  http://$SERVER_IP/api/get_data${NC}"
    echo -e "${BLUE}   HTTPS: https://$SERVER_IP/api/get_data${NC}"
    echo -e "${BLUE}   HTTPS: https://$SERVER_IP:5000/api/get_data${NC}"
    echo ""
    echo "üìå Test endpoints:"
    echo -e "${BLUE}   http://$SERVER_IP/health${NC}"
    echo -e "${BLUE}   https://$SERVER_IP/api/test-cors${NC}"
    echo ""
    echo "üìå Useful commands:"
    echo "   docker-compose logs -f flask-app  # View Flask logs"
    echo "   docker-compose logs -f nginx      # View Nginx logs"
    echo "   docker-compose restart flask-app  # Restart Flask"
    echo "   docker-compose down              # Stop all containers"
    echo "   docker-compose up -d             # Start all containers"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Note: HTTPS uses a self-signed certificate.${NC}"
    echo "   Browsers will show a security warning."
    echo "   Click 'Advanced' and 'Proceed' to continue."
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    echo "======================================"
    echo "    Flask API HTTPS Deployment"
    echo "    Server: $SERVER_IP"
    echo "======================================"
    echo ""
    
    check_docker
    create_directories
    generate_ssl
    check_excel_file
    create_env_file
    stop_old_containers
    build_and_start
    check_status
    print_instructions
}

# –ó–∞–ø—É—Å–∫
main